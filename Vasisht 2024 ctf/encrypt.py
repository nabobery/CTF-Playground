from Crypto.Util.number import *

flag = b'<redacted>'
flag = bytes_to_long(flag)

p = getPrime(64)
q = getPrime(256)
n = p * q

assert n > flag

e = 65537

ct = pow(flag, e, n)

print("n:", n) # 806704453925916376241138342513764759694016480895315246055011522287508180289505799369947191610601
print("ct:", ct) # 762455931346013832056509175748789782334396365067918709406946600251430637403555697175178736630332

n = 806704453925916376241138342513764759694016480895315246055011522287508180289505799369947191610601

ct = 762455931346013832056509175748789782334396365067918709406946600251430637403555697175178736630332

p = 10391365104330587849

q = 77632192289126993297792365174469782083249762592589102440391630336358015094049

phi = (p-1)*(q-1)

d = pow(e, -1, phi)

m = pow(ct, d, n)

flag = long_to_bytes(m).decode('ascii')

print(flag)